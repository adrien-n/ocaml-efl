OASISFormat: 0.3
Plugins: META (0.3), StdFiles (0.3)
Name: ocaml-efl
Version: 1.8.1
OCamlVersion: >= 3.12
Synopsis: An OCaml interface to the Enlightenment Foundation Libraries (EFL).
License: LGPL-2.1+ with Ocaml linking exception
Authors: Alexis Bernadet <alexis.bernadet ate noos.fr>
BuildTools: ocamlbuild
XStdFilesREADME: false
XStdFilesINSTALL: false
XStdFilesAUTHORSFilename: AUTHORS
Library efl
  Path: src
  Pack: true
  CCLib:
    -lelementary -lm -leina -lpthread -leet -levas -lecore -lecore_evas
    -lecore_file -lecore_input -ledje -leo -lethumb_client -lemotion
    -lecore_imf -lecore_con -leio -leldbus -lefreet -lefreet_mime -lefreet_trash
  Modules:
    Ecore,
    Ecore_timer,
    Evas,
    Evas_object,
    Evas_object_smart,
    Ethumb,
    Edje,
    Elm,
    Elm_object,
    Elm_layout,
    Elm_scroller,
    Elm_win,
    Elm_bg,
    Elm_label,
    Elm_box,
    Elm_button,
    Elm_frame,
    Elm_icon,
    Elm_entry,
    Elm_gen,
    Elm_gengrid,
    Elm_check,
    Elm_inwin,
    Elm_win_inwin,
    Elm_naviframe,
    Elm_theme,
    Elm_radio,
    Elm_app,
    Elm_image,
    Elm_separator,
    Elm_notify,
    Elm_spinner,
    Elm_clock,
    Elm_hover,
    Elm_fileselector,
    Elm_list,
    Elm_menu,
    Elm_progressbar,
    Elm_genlist,
    Elm_grid,
    Elm_actionslider,
    Elm_config,
    Elm_font,
    Elm_bubble,
    Elm_slider,
    Elm_toolbar,
    Elm_conformant,
    Elm_gesture_layer,
    Elm_panes,
    Elm_transit,
    Elm_table,
    Elm_fileselector_button,
    Elm_fileselector_entry,
    Elm_hoversel,
    Elm_popup,
    Elm_sig,
    Elm_ctxpopup,
    Elm_flip,
    Elm_flipselector,
    Elm_panel,
    Elm_map,
    Elm_thumb,
    Elm_diskselector,
    Elm_web,
    Elm_index,
    Elm_mapbuf,
    Elm_photo,
    Elm_route,
    Elm_segment_control,
    Elm_slideshow,
    Elm_photocam
  CSources:
    include.h,
    eina_wrap.c,
    eina_wrap.h,
    evas_wrap.c,
    evas_wrap.h,
    ecore_wrap.c,
    ecore_wrap.h,
    ethumb_wrap.h,
    ethumb_wrap.c,
    edje_wrap.c,
    edje_wrap.h,
    elm_wrap.c,
    elm_wrap.h,
    elm_scroller_wrap.c,
    elm_scroller_wrap.h,
    elm_button_wrap.c,
    elm_label_wrap.c,
    elm_entry_wrap.c,
    elm_layout_wrap.c,
    elm_radio_wrap.c,
    elm_check_wrap.c,
    elm_box_wrap.c,
    elm_win_wrap.c,
    elm_app_wrap.c,
    elm_image_wrap.c,
    elm_separator_wrap.c,
    elm_notify_wrap.c,
    elm_icon_wrap.h,
    elm_icon_wrap.c,
    elm_bg_wrap.c,
    elm_object_wrap.h,
    elm_object_wrap.c,
    elm_spinner_wrap.c,
    elm_clock_wrap.c,
    elm_inwin_wrap.c,
    elm_hover_wrap.c,
    elm_fileselector_wrap.c,
    elm_list_wrap.c,
    elm_menu_wrap.c,
    elm_naviframe_wrap.c,
    elm_progressbar_wrap.c,
    elm_genlist_wrap.c,
    elm_list_wrap.h,
    elm_gen_wrap.c,
    elm_gen_wrap.h,
    elm_grid_wrap.c,
    elm_actionslider_wrap.c,
    elm_gengrid_wrap.c,
    elm_config_wrap.c,
    elm_font_wrap.c,
    elm_bubble_wrap.c,
    elm_frame_wrap.c,
    elm_slider_wrap.c,
    elm_toolbar_wrap.c,
    elm_theme_wrap.c,
    elm_conformant_wrap.c,
    elm_gesture_layer_wrap.c,
    elm_panes_wrap.c,
    elm_transit_wrap.c,
    elm_table_wrap.c,
    elm_fileselector_button_wrap.c,
    elm_fileselector_entry_wrap.c,
    elm_hoversel_wrap.c,
    elm_popup_wrap.c,
    elm_ctxpopup_wrap.c,
    elm_flip_wrap.c,
    elm_flipselector_wrap.c,
    elm_panel_wrap.c,
    elm_map_wrap.c,
    elm_thumb_wrap.c,
    elm_diskselector_wrap.c,
    elm_web_wrap.c,
    elm_index_wrap.c,
    elm_mapbuf_wrap.c,
    elm_photo_wrap.c,
    elm_route_wrap.c,
    elm_segment_control_wrap.c,
    elm_slideshow_wrap.c,
    elm_photocam_wrap.c
Document efl_doc
  Type: ocamlbuild (0.3)
  InstallDir: $htmldir/api
  BuildTools: ocamldoc
  Title: Documentation of ocaml-efl
  XOCamlbuildPath: src
  XOCamlbuildLibraries: efl
  DataFiles: examples/*.ml ($docdir/examples)
Flag examples
  Description: Compile examples
  Default: false
Flag install_examples
  Description: Install examples
  Default: false
Executable test
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: test.ml
  CompiledObject: best
Executable test2
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: test2.ml
  CompiledObject: byte
Executable test3
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: test3.ml
Executable button_example_00
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: button_example_00.ml
Executable button_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: button_example_01.ml
Executable label_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: label_example_01.ml
Executable entry_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: entry_example.ml
Executable radio_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: radio_example_01.ml
Executable check_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: check_example_01.ml
Executable box_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: box_example_02.ml
Executable win_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: win_example.ml
Executable image_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: image_example_01.ml
Executable icon_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: icon_example_01.ml
Executable bg_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: bg_example_01.ml
Executable bg_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: bg_example_02.ml
Executable bg_example_03
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: bg_example_03.ml
Executable notify_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: notify_example_01.ml
Executable separaor_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: separator_example_01.ml
Executable layout_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: layout_example_01.ml
Executable layout_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: layout_example_02.ml
Executable layout_example_03
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: layout_example_03.ml
Executable inwin_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: inwin_example.ml
Executable fileselector_example
  Path: examples
  Install$: flag(install_examples)
  BuildDepends: efl
  MainIs: fileselector_example.ml
Executable list_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: list_example_01.ml
Executable list_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: list_example_02.ml
Executable list_example_03
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: list_example_03.ml
Executable menu_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: menu_example_01.ml
Executable progressbar_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl, threads
  MainIs: progressbar_example.ml
Executable test_efl_ocaml_threads
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl, threads
  MainIs: test_efl_ocaml_threads.ml
Executable test_efl_ocaml_threads2
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl, threads
  MainIs: test_efl_ocaml_threads2.ml
Executable genlist_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: genlist_example_01.ml
Executable genlist_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl, unix
  MainIs: genlist_example_02.ml
Executable genlist_example_03
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl, unix
  MainIs: genlist_example_03.ml
Executable scroller_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: scroller_example_01.ml
Executable genlist_example_04
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl, unix
  MainIs: genlist_example_04.ml
Executable genlist_example_05
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: genlist_example_05.ml
Executable actionslider_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: actionslider_example_01.ml
Executable bubble_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: bubble_example_01.ml
Executable frame_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: frame_example_01.ml
Executable slider_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: slider_example.ml
Executable toolbar_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: toolbar_example_01.ml
Executable toolbar_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: toolbar_example_02.ml
Executable toolbar_example_03
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: toolbar_example_03.ml
Executable panes_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: panes_example.ml
Executable table_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: table_example_01.ml
Executable table_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: table_example_02.ml
Executable fileselector_button_example
  Path: examples
  Install$: flag(install_examples)
  BuildDepends: efl
  MainIs: fileselector_button_example.ml
Executable fileselector_entry_example
  Path: examples
  Install$: flag(install_examples)
  BuildDepends: efl
  MainIs: fileselector_entry_example.ml
Executable hoversel_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: hoversel_example_01.ml
Executable hover_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: hover_example_01.ml
Executable spinner_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: spinner_example.ml
Executable popup_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: popup_example_01.ml
Executable popup_example_02
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: popup_example_02.ml
Executable popup_example_03
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: popup_example_03.ml
Executable ctxpopup_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: ctxpopup_example_01.ml
Executable flip_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: flip_example_01.ml
Executable flipselector_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: flipselector_example_01.ml
Executable panel_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: panel_example_01.ml
Executable thumb_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: thumb_example_01.ml
Executable map_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: map_example_01.ml
Executable diskselector_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: diskselector_example_01.ml
Executable web_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: web_example_01.ml
Executable mapbuf_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: mapbuf_example.ml
Executable segment_control_example
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: segment_control_example.ml
Executable photocam_example_01
  Path: examples
  Install$: flag(install_examples)
  Build$: flag(examples)
  BuildDepends: efl
  MainIs: photocam_example_01.ml
